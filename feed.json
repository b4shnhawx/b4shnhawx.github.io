{
    "version": "https://jsonfeed.org/version/1",
    "title": "Cibersec and hacking blog",
    "description": "",
    "home_page_url": "https://b4shnhawx.github.io",
    "feed_url": "https://b4shnhawx.github.io/feed.json",
    "user_comment": "",
    "author": {
        "name": "b4shnhawx"
    },
    "items": [
        {
            "id": "https://b4shnhawx.github.io/ssh-telegrambot-in-python.html",
            "url": "https://b4shnhawx.github.io/ssh-telegrambot-in-python.html",
            "title": "SSH TelegramBot in Python",
            "summary": "Today I bring you a project that I finished some time ago, but that has earned a place in my favourite projects: a bot for Telegram. Ok,&hellip;",
            "content_html": "<p>Today I bring you a project that I finished some time ago, but that has earned a place in my favourite projects: a bot for Telegram.<br><br>Ok, but what is the difference between this bot and any other ‘hello_world_telgrambot.py’ bot on the internet? Basically, this one is capable of interpreting commands on the machine that is running it (Linux) 💣<br><br>Before we throw our hands up in the air ‘Oh no, it's open to the internet and anyone can access it! Yes, that's true, and I know it, but that's why I've added a security measure that's as simple as it is reliable.<br><br>Each Telegram user has a unique ID, so let's use it to our advantage.</p>\n<blockquote>\n<p>Raspberry Pi, in every message sent to the Telegram bot, compare the ID of the sender with the ones I have put in your whitelist. If the ID doesn't match, it's NOT me, so don't pay attention to it. </p>\n</blockquote>\n<p><br>Although I have tried to make it plug-and-play, reducing a lot the necessary configuration to be able to replicate it to your liking, I want to mention several things here even though everything is explained in the comments in the code itself and its repository.<br><br></p>\n<div class=\"tittle__line\">\n<h3>UNDERSTANDING THE SCRIPT</h3>\n<hr class=\"line\">\n<p>First of all, please note that the following dependencies must be installed:</p>\n<pre class=\"language-python\"><code>pip3 install telebot\npip3 install python-telegram-bot</code></pre>\n<p>I have divided the code into three parts. Mandatory, Optional and Main.</p>\n<ul>\n<li><strong>Mandatory</strong>: As the name indicates, this part of the code is the minimum for the SSH bot to work.<br><br>In this section you only need to change the token of your bot, and the chat IDs you want to allow. You can put as many IDs as you want separated by commas in case you want multiple users to have access to the same machine.<br>\n<pre class=\"language-python\"><code>........\n\n### -----------------------------------------------\n### --------- MANDATORY CODE FOR SSH BOT ----------\n### -----------------------------------------------\n\n### --- VARIABLES ---\n\n........\n\ntoken = \"xxxxxxxxx:ABCDEFabcdef...\"\npermit_chat_id = (CHAT_ID_1, CHAT_ID_2, CHAT_ID_3...)\n\n........</code></pre>\n</li>\n<li><strong>Optional</strong>: Here you can add or modify the existing options and functions as you wish. In my case, the options that I have added are <em>ping_pc</em>, <em>public_ip</em>,<em> magic_packet_pc</em>,<em> suspend_pc MINUTOS</em>,<em> logoff_pc</em>,<em> shut_down_pc</em>,<em> cmd bash command</em>.<br><br>In this section is where you should put the variables for your optional functions. In case you don't want any other optional functions, you can delete all the content up to the MAIN section.<br>\n<pre class=\"language-python\"><code>........\n\n### ------------------------------------------------\n### -------- OPTIONAL FUNCTIONS FOR THE BOT --------\n### ------------------------------------------------\n\n### --- VARIABLES ---\n\nmac_magic_packet = \"MAC_ADDRESS\"\nip_pc = \"IP_ADDRESS\"\nuser = \"USER\"\npassword = \"PASSWORD\"\n\n........</code></pre>\n<p>To add new functions, at the end of the optional functions I have left an example / template (called EXAMPLE COMMAND) to add other commands with arguments.<br><br>Don't forget that if you add new optional functions, you should add them in the MANDATORY section in the /start and /test commands so that they appear as help.<br><br></p>\n</li>\n<li><strong>Main</strong>: It is the part that runs the bot, so it should not be changed.</li>\n</ul>\n<div class=\"tittle__line\">\n<h3><strong>USE CASE EXAMPLES</strong></h3>\n<hr class=\"line\">\n<p> </p>\n<p>To enable and disable SSH mode, simply send the command /terminal. At this point, the bot will indicate the status of the terminal and if it is active, anything we send will be interpreted as a command and the output will be sent to us.<br>(Note that it has its limitations, so don't expect to do a ‘man ssh’ to work xD)</p>\n<p> </p>\n<div style=\"text-align: center;\"><img loading=\"lazy\" style=\"width: 50%; height: auto;\" src=\"https://github.com/b4shnhawx/ssh-telegram-bot/raw/main/images/command.jpg\" alt=\"Command example\" data-is-external-image=\"true\"></div>\n<div> </div>\n<div>Also if the script belongs to root you can get the permissions inherited and execute commands with root.<br><br><br>An example of an intrusion attempt would be this:</div>\n<ol>\n<li>A user without permissions (left screenshot) starts the bot and tries to send the /terminal command to enable SSH (yellow). He also sends several commands to validate if he has access to the machine (green and blue), but the bot has not allowed terminal mode to be enabled.</li>\n<li>To the users in the whitelist it sends a message with the information (middle screenshot), warning that a user has started the bot (red).</li>\n<li>When the anonymous user sends the command /terminal (right screenshot), it will send us a message indicating that it has tried to execute a command (yellow), as well as resending us the command attempts (green and blue).</li>\n</ol>\n<div style=\"text-align: center;\"><img loading=\"lazy\" style=\"width: 100%; height: auto;\" src=\"https://github.com/b4shnhawx/ssh-telegram-bot/raw/main/images/img_intrusion.jpg\" alt=\"Command example\" data-is-external-image=\"true\"></div>\n<div> </div>\n<div> </div>\n<div> </div>\n</div>\n</div>",
            "image": "https://b4shnhawx.github.io/media/posts/6/command.jpg",
            "author": {
                "name": "b4shnhawx"
            },
            "tags": [
                   "raspberrypi",
                   "python",
                   "programming",
                   "networking"
            ],
            "date_published": "2024-08-21T00:34:28+02:00",
            "date_modified": "2024-08-21T16:02:58+02:00"
        },
        {
            "id": "https://b4shnhawx.github.io/dfir4win-automates-the-artifacts-extraction.html",
            "url": "https://b4shnhawx.github.io/dfir4win-automates-the-artifacts-extraction.html",
            "title": "DFIR4win - Automates the artifacts extraction",
            "summary": "Manually extracting artefacts from an infected computer can sometimes be tedious with so much information to search for, documents and logs. That's why the less time it&hellip;",
            "content_html": "<p>Manually extracting artefacts from an infected computer can sometimes be tedious with so much information to search for, documents and logs. That's why the less time it takes to extract the most relevant information, the longer we can spend looking for any clues or evidence.<br><br>With this idea in mind I found in Github a script that looked very good from the user <a href=\"https://github.com/AlrikRr\">AlrikRr</a> (I invite you to take a look at his cool projects), specifically I'm talking about <a href=\"https://github.com/AlrikRr/Forensic-Extract\">Forensic-Extract</a>.</p>\n<p>Looking at his project I thought <em>\"OK, it extracts very useful information and records, but... what if I add the option to extract hives?\"</em>, so I took advantage of it and made a few more changes:<br><br></p>\n<ul>\n<li>Translated the code into English</li>\n<li>Optimised the code as much as I could</li>\n<li>Added the option to extract hives</li>\n<li>Added a Microsoft Defender status checker</li>\n</ul>\n<p>You can see the project in my Github: <a href=\"https://github.com/b4shnhawx/DFIR4win/tree/main\">b4shnhawx/DFIR4win</a></p>\n<p> </p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://b4shnhawx.github.io/media/posts/5/dfir4win_demo_noav.gif\" alt=\"\" width=\"774\" height=\"486\"></figure>\n<p> </p>\n<p>DFIR4win can automate the collection of most of the data you need to analyse activity on a Windows machine and compress it all into a ZIP file.<br>It includes:</p>\n<p> </p>\n<ul>\n<li>Relevant host information</li>\n<li>Event logs</li>\n<li>Log hives (for more details, see Microsoft documentation)</li>\n</ul>\n<p><br>If you want to extract the hives, you may need to disable the real-time protection of your antivirus (AV), as it may consider the action suspicious. By default, Windows uses Windows Defender.</p>\n<p><br>This script detects whether your active AV is Windows Defender or some other third-party antivirus. If it is the latter, it is possible that other modules of your AV are blocking the extraction of the files, so I recommend you to manually check if all the files you need have been extracted correctly.</p>\n<p><br>If the script is not working properly to extract the files, you can do it manually with a program (such as Eric Zimmerman's Registry Explorer).</p>\n<p> </p>\n<p>This would be the final directory tree:<br><br></p>\n<pre class=\"language-bash\"><code>./HOST_DD-MM-YYYY.zip\n |\n |-- REGS\n |    |-- *_HOST_DD-MM-YYYY.evtx\n |\n |-- HIVES\n |    |-- Security.hiv\n |    |-- SAM.hiv\n |    |-- DEFAULT.hiv\n |    |-- NTUSER_USERNAME.DAT\n |    |-- System.hiv\n |    |-- USRCLASS_USERNAME.DAT\n |    |-- Software.hiv\n |\n |-- Host-Info_HOST_DD-MM-YYYY.txt</code></pre>\n<p> </p>\n<p>You have all the information about how the script works in the repository 😁</p>\n<p> </p>",
            "image": "https://b4shnhawx.github.io/media/posts/5/dfir4win.png",
            "author": {
                "name": "b4shnhawx"
            },
            "tags": [
                   "windows",
                   "programming",
                   "powershell",
                   "os",
                   "hacking",
                   "deffensive"
            ],
            "date_published": "2024-08-19T19:28:44+02:00",
            "date_modified": "2024-08-21T00:07:44+02:00"
        },
        {
            "id": "https://b4shnhawx.github.io/first-post.html",
            "url": "https://b4shnhawx.github.io/first-post.html",
            "title": "Welcome to my blog - First post!",
            "summary": "Hello to all of you! For a long time I wanted to start a project where I could share some of my projects, achievements, experiences or ideas&hellip;",
            "content_html": "<p>Hello to all of you!<br><br>For a long time I wanted to start a project where I could share some of my projects, achievements, experiences or ideas in the cybersecurity world, so, what better way than with a blog?<br><br>In this blog I will try to upload content from different areas of cybersecurity, some more complex, others not so much ... you will see.<br><br>A summary of some of the things I want to upload:<br>- Networking<br>- Raspberry Pi<br>- Programming in python, PowerShell and of course, my beloved bash.<br>- Flipper Zero<br>- Although it is not my expertise, some ethical hacking.<br><br>That's all, see you around!</p>",
            "image": "https://b4shnhawx.github.io/media/posts/4/j2hkcly5xc781.png",
            "author": {
                "name": "b4shnhawx"
            },
            "tags": [
                   "personal"
            ],
            "date_published": "2024-08-18T02:54:26+02:00",
            "date_modified": "2024-08-18T15:31:24+02:00"
        }
    ]
}
