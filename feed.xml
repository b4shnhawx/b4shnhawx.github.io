<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>Cibersec and hacking blog</title>
    <link href="https://b4shnhawx.github.io/feed.xml" rel="self" />
    <link href="https://b4shnhawx.github.io" />
    <updated>2024-08-23T13:20:13+02:00</updated>
    <author>
        <name>b4shnhawx</name>
    </author>
    <id>https://b4shnhawx.github.io</id>

    <entry>
        <title>Securing Termux with fingerprint</title>
        <author>
            <name>b4shnhawx</name>
        </author>
        <link href="https://b4shnhawx.github.io/securing-termux-with-fingerprint.html"/>
        <id>https://b4shnhawx.github.io/securing-termux-with-fingerprint.html</id>
            <category term="termux"/>
            <category term="programming"/>
            <category term="os"/>
            <category term="linux"/>
            <category term="bash"/>

        <updated>2024-08-23T12:42:10+02:00</updated>
            <summary>
                <![CDATA[
                    SECURING TERMUX WHEN OPENING A NEW TERMINAL At de beggining of the file .zshrc (.bashrc by default) # Security finger print echo "\n----==== SYSTEM LOCKED ====----\n" termux-fingerprint&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="tittle__line">
<h3><strong>SECURING TERMUX WHEN OPENING A NEW TERMINAL</strong></h3>
<hr class="line">
<p>At de beggining of the file .zshrc (.bashrc by default)</p>
<p> </p>
<pre class="language-bash"><code># Security finger print
echo "\n----==== SYSTEM LOCKED ====----\n"
termux-fingerprint | grep -q "AUTH_RESULT_SUCCESS" &amp;&amp; {
    echo -e "\n\e[32m     -= ACCESS GRANTED! =-  \e[0m\n"
} || {
    echo -e "\n\e[31m     -= ACCESS DENIED!! =-  \e[0m\n"
    sleep 1
    exit 1
}

.........</code></pre>
<div class="tittle__line">
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="2">
<figure class="gallery__item"><a href="https://b4shnhawx.github.io/media/posts/15/gallery/Screenshot_2024-08-23-13-01-35-548_com.termux.jpg" data-size="1080x875"><img loading="lazy" src="https://b4shnhawx.github.io/media/posts/15/gallery/Screenshot_2024-08-23-13-01-35-548_com.termux-thumbnail.jpg" alt="Acces denied" width="720" height="583"></a>
<figcaption>Example of failures when reading the fingerprint</figcaption>
</figure>
<figure class="gallery__item"><a href="https://b4shnhawx.github.io/media/posts/15/gallery/Screenshot_2024-08-23-13-02-28-933_com.termux.jpg" data-size="1080x875"><img loading="lazy" src="https://b4shnhawx.github.io/media/posts/15/gallery/Screenshot_2024-08-23-13-02-28-933_com.termux-thumbnail.jpg" alt="Acces granted" width="720" height="583"></a>
<figcaption>Example of authorised access</figcaption>
</figure>
</div></div>
<h3><strong>SECURING CUSTOMISED ALIASES</strong></h3>
<hr class="line">
<p>Also, we can create alias to securize different commands at the end of the .zshrc file.<br><br></p>
<p>For example:<br><br></p>
<pre class="language-bash"><code>.........

# MY FUNCTIONS
check_finger_access() {
    local command="$1"
    shift

    termux-fingerprint | grep -q "AUTH_RESULT_SUCCESS" &amp;&amp; {
        echo -e "\n\e[32m&gt; ACCESS GRANTED &lt;\e[0m\n"
        command $command "$@"
    } || {
        echo -e "\n\e[31m&gt; ACCESS DENIED &lt;\e[0m\n"
        return 1
    }
}

# MY ALIAS COMMANDS

alias nano='check_finger_access nano'
alias bash='check_finger_access bash'</code></pre>
<p>When we go to execute the nano or bash commands, Termux will ask us to check the fingerprint.</p>
<p> </p>
<div class="tittle__line">
<h3><strong>SCRIPT TO ENABLE / DISABLE CHECKING ON ALIASES</strong></h3>
<hr class="line">
<p>In addition, we can create a script to change whether we want to enable or disable these aliases so that we are only prompted for the fingerprint when opening Termux:<br><br></p>
<pre class="language-bash"><code>#!/bin/bash

# Archivo donde se aplicarán los cambios
ZSHRC_FILE="$HOME/.zshrc"

# Patrón a buscar
PATTERN="='check_finger_access "
EXCEPTION="switch_finger_check.sh"

# Verificar si ya hay líneas comentadas que coincidan con el patrón
if grep -q "^#.*$PATTERN" "$ZSHRC_FILE"; then
    # Descomentar las líneas que contengan el patrón, pero no la excepción
    sed -i "/^#.*$PATTERN/ {/$EXCEPTION/!s/^#//}" "$ZSHRC_FILE"
    echo -e "&gt; Security fingerprint \e[32menabled\e[0m"
    echo -e "&gt; Restart needed to apply changes\n"
else
    # Comentar las líneas que contengan el patrón, pero no la excepción
    sed -i "/$PATTERN/ {/$EXCEPTION/!s/^/#/}" "$ZSHRC_FILE"
    echo -e "&gt; Security fingerprint \e[31mdisabled\e[0m"
    echo -e "&gt; Restart needed to apply changes\n"
fi</code></pre>
<p>We create another alias requesting also the fingerprint before enabling/disabling the fingerprint check:<br><br></p>
<pre class="language-bash"><code>alias sectermux='check_finger_access bash /data/data/com.termux/files/home/Scripts/switch_finger_check.sh'</code></pre>
<p> </p>
<p><strong style="font-family: var(--font-base); font-size: 1.42383em; letter-spacing: var(--letter-spacing);">DISCLAIMERS</strong></p>
</div>
</div>
<div class="tittle__line"><hr class="line">
<ul>
<li>Blocking by alias is not a foolproof method. For example, if you want to block editing of files by creating an alias with nano, any user could bypass the fingerprint check by using any other editor or even modifying lines with sed or awk.</li>
<li>If you have an SSH server in Termux, when you try to connect remotely, it will ask for the fingerprint in Termux (although you will probably have to open Termux before you can connect again). It would work like a 2FA.</li>
</ul>
</div>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Auto backup for Termux</title>
        <author>
            <name>b4shnhawx</name>
        </author>
        <link href="https://b4shnhawx.github.io/auto-backup-for-termux.html"/>
        <id>https://b4shnhawx.github.io/auto-backup-for-termux.html</id>
        <media:content url="https://b4shnhawx.github.io/media/posts/8/files.jpg" medium="image" />
            <category term="termux"/>
            <category term="programming"/>
            <category term="os"/>
            <category term="linux"/>
            <category term="bash"/>

        <updated>2024-08-21T11:43:00+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://b4shnhawx.github.io/media/posts/8/files.jpg" alt="" />
                    Needless to say, Termux is an incredible tool for any Linux enthusiast. It is an Android terminal emulator, and has nothing to do with a virtualised or&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://b4shnhawx.github.io/media/posts/8/files.jpg" class="type:primaryImage" alt="" /></p>
                <p>Needless to say, <strong>Termux is an incredible tool for any Linux enthusiast</strong>. It is an Android terminal emulator, and has nothing to do with a virtualised or simulated installation. That is, with it we would be interacting directly with our Android device, but of course, with limited and restricted access outside the Termux installation directory and, above all, to the hardware.<br><br>Even so, with Termux we can tinker a lot creating scripts or installing packages as in any other machine.<br><br>The problem comes when you are constantly changing things and trying things out. That's when you realise, you've been installing packages for 2 hours and making so many changes that you don't know what you've done and you think, <em>"why wouldn't I make a backup before to restore termux to a state before I messed up?"</em>.<br><br></p>
<p>That is why I have created a bash script for this task:<br><br></p>
<ul dir="auto">
<li>Creates a backup (home directory included) of Termux.</li>
<li>Searches for backups older than 7 days and deletes them.</li>
<li>Sends a notification to the mobile when it finishes (OK or ERROR).</li>
<li>Creates a .log record of the actions it performs.</li>
<li>(extra) With Drive sync I synchronize the path of Termux to have everything in Drive.</li>
</ul>
<p>You can see the project in my Github: <a href="https://github.com/b4shnhawx/termux-backup/tree/main">b4shnhawx/termux-backup</a><br><br></p>
<div class="tittle__line">
<h3><strong>USE CASE</strong></h3>
<hr class="line">
<p>The script itself is not very complicated. If you wish, you can format the date, name and path where the backups will be saved in the variables in lines 3 to 6.<br><br></p>
<div style="text-align: center;"><figure class="post__image"><img loading="lazy"  style="width: auto; height: auto;" src="https://raw.githubusercontent.com/b4shnhawx/termux-backup/main/images/bash-script.jpg" alt="Command example" data-is-external-image="true"></figure></div>
<div> </div>
<div>We already have the script. So now we need to set up crontab to run the script every day at X time. To do this:</div>
<div>
<pre class="language-bash"><code>crontab -e</code></pre>
In my case I want the backup to run every day at 5 AM.<br><br>
<pre class="language-bash"><code>0 5 * * * bash /data/data/com.termux/files/home/scripts/termux_backup.sh</code></pre>
<p> </p>
</div>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>SSH TelegramBot in Python</title>
        <author>
            <name>b4shnhawx</name>
        </author>
        <link href="https://b4shnhawx.github.io/ssh-telegrambot-in-python.html"/>
        <id>https://b4shnhawx.github.io/ssh-telegrambot-in-python.html</id>
        <media:content url="https://b4shnhawx.github.io/media/posts/6/command.jpg" medium="image" />
            <category term="raspberrypi"/>
            <category term="python"/>
            <category term="programming"/>
            <category term="networking"/>

        <updated>2024-08-21T00:34:28+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://b4shnhawx.github.io/media/posts/6/command.jpg" alt="" />
                    Today I bring you a project that I finished some time ago, but that has earned a place in my favourite projects: a bot for Telegram. Ok,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://b4shnhawx.github.io/media/posts/6/command.jpg" class="type:primaryImage" alt="" /></p>
                <p>Today I bring you a project that I finished some time ago, but that has earned a place in my favourite projects: a bot for Telegram.<br><br>Ok, but what is the difference between this bot and any other ‘hello_world_telgrambot.py’ bot on the internet? Basically, this one is capable of interpreting commands on the machine that is running it (Linux) 💣<br><br>Before we throw our hands up in the air ‘Oh no, it's open to the internet and anyone can access it! Yes, that's true, and I know it, but that's why I've added a security measure that's as simple as it is reliable.<br><br>Each Telegram user has a unique ID, so let's use it to our advantage.<br><br></p>
<blockquote>
<p>Raspberry Pi, in every message sent to the Telegram bot, compare the ID of the sender with the ones I have put in your whitelist. If the ID doesn't match, it's NOT me, so don't pay attention to it. </p>
</blockquote>
<p><br>Although I have tried to make it plug-and-play, reducing a lot the necessary configuration to be able to replicate it to your liking, I want to mention several things here even though everything is explained in the comments in the code itself and its repository.<br><br></p>
<p>You can see the project in my Github: <a href="https://github.com/b4shnhawx/ssh-telegram-bot">b4shnhawx/ssh-telegram-bot</a></p>
<div class="tittle__line">
<h3><br>UNDERSTANDING THE SCRIPT</h3>
<hr class="line">
<p>First of all, please note that the following dependencies must be installed:<br><br></p>
<pre class="language-python"><code>pip3 install telebot
pip3 install python-telegram-bot</code></pre>
<p>I have divided the code into three parts. Mandatory, Optional and Main.</p>
<ul>
<li><strong>Mandatory</strong>: As the name indicates, this part of the code is the minimum for the SSH bot to work.<br><br>In this section you only need to change the token of your bot, and the chat IDs you want to allow. You can put as many IDs as you want separated by commas in case you want multiple users to have access to the same machine.<br><br>
<pre class="language-python"><code>........

### -----------------------------------------------
### --------- MANDATORY CODE FOR SSH BOT ----------
### -----------------------------------------------

### --- VARIABLES ---

........

token = "xxxxxxxxx:ABCDEFabcdef..."
permit_chat_id = (CHAT_ID_1, CHAT_ID_2, CHAT_ID_3...)

........</code></pre>
</li>
<li><strong>Optional</strong>: Here you can add or modify the existing options and functions as you wish. In my case, the options that I have added are <em>ping_pc</em>, <em>public_ip</em>,<em> magic_packet_pc</em>,<em> suspend_pc MINUTOS</em>,<em> logoff_pc</em>,<em> shut_down_pc</em>,<em> cmd bash command</em>.<br><br>In this section is where you should put the variables for your optional functions. In case you don't want any other optional functions, you can delete all the content up to the MAIN section.<br><br>
<pre class="language-python"><code>........

### ------------------------------------------------
### -------- OPTIONAL FUNCTIONS FOR THE BOT --------
### ------------------------------------------------

### --- VARIABLES ---

mac_magic_packet = "MAC_ADDRESS"
ip_pc = "IP_ADDRESS"
user = "USER"
password = "PASSWORD"

........</code></pre>
<p>To add new functions, at the end of the optional functions I have left an example / template (called EXAMPLE COMMAND) to add other commands with arguments.<br><br>Don't forget that if you add new optional functions, you should add them in the MANDATORY section in the /start and /test commands so that they appear as help.<br><br></p>
</li>
<li><strong>Main</strong>: It is the part that runs the bot, so it should not be changed.</li>
</ul>
<div class="tittle__line">
<h3><strong>USE CASE EXAMPLES</strong></h3>
<hr class="line">
<p> </p>
<p>To enable and disable SSH mode, simply send the command /terminal. At this point, the bot will indicate the status of the terminal and if it is active, anything we send will be interpreted as a command and the output will be sent to us.<br>(Note that it has its limitations, so don't expect to do a ‘man ssh’ to work xD)</p>
<p> </p>
<div style="text-align: center;"><img loading="lazy" style="width: 50%; height: auto;" src="https://raw.githubusercontent.com/b4shnhawx/ssh-telegram-bot/main/images/command.jpg" alt="Command example" data-is-external-image="true"></div>
<div> </div>
<div>Also if the script belongs to root you can get the permissions inherited and execute commands with root.<br><br><br>An example of an intrusion attempt would be this:</div>
<ol>
<li>A user without permissions (left screenshot) starts the bot and tries to send the /terminal command to enable SSH (yellow). He also sends several commands to validate if he has access to the machine (green and blue), but the bot has not allowed terminal mode to be enabled.</li>
<li>To the users in the whitelist it sends a message with the information (middle screenshot), warning that a user has started the bot (red).</li>
<li>When the anonymous user sends the command /terminal (right screenshot), it will send us a message indicating that it has tried to execute a command (yellow), as well as resending us the command attempts (green and blue).</li>
</ol>
<div style="text-align: center;"><img loading="lazy" style="width: 100%; height: auto;" src="https://raw.githubusercontent.com/b4shnhawx/ssh-telegram-bot/main/images/img_intrusion.jpg" alt="Command example" data-is-external-image="true"></div>
<div> </div>
<div> </div>
<div> </div>
</div>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>DFIR4win - Automates the artifacts extraction</title>
        <author>
            <name>b4shnhawx</name>
        </author>
        <link href="https://b4shnhawx.github.io/dfir4win-automates-the-artifacts-extraction.html"/>
        <id>https://b4shnhawx.github.io/dfir4win-automates-the-artifacts-extraction.html</id>
        <media:content url="https://b4shnhawx.github.io/media/posts/5/dfir4win.png" medium="image" />
            <category term="windows"/>
            <category term="programming"/>
            <category term="powershell"/>
            <category term="os"/>
            <category term="hacking"/>
            <category term="deffensive"/>

        <updated>2024-08-19T19:28:44+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://b4shnhawx.github.io/media/posts/5/dfir4win.png" alt="" />
                    Manually extracting artefacts from an infected computer can sometimes be tedious with so much information to search for, documents and logs. That's why the less time it&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://b4shnhawx.github.io/media/posts/5/dfir4win.png" class="type:primaryImage" alt="" /></p>
                <p>Manually extracting artefacts from an infected computer can sometimes be tedious with so much information to search for, documents and logs. That's why the less time it takes to extract the most relevant information, the longer we can spend looking for any clues or evidence.<br><br>With this idea in mind I found in Github a script that looked very good from the user <a href="https://github.com/AlrikRr">AlrikRr</a> (I invite you to take a look at his cool projects), specifically I'm talking about <a href="https://github.com/AlrikRr/Forensic-Extract">Forensic-Extract</a>.</p>
<p>Looking at his project I thought <em>"OK, it extracts very useful information and records, but... what if I add the option to extract hives?"</em>, so I took advantage of it and made a few more changes:<br><br></p>
<ul>
<li>Translated the code into English</li>
<li>Optimised the code as much as I could</li>
<li>Added the option to extract hives</li>
<li>Added a Microsoft Defender status checker</li>
</ul>
<p>You can see the project in my Github: <a href="https://github.com/b4shnhawx/DFIR4win/tree/main">b4shnhawx/DFIR4win</a></p>
<p> </p>
<figure class="post__image"><img loading="lazy"  src="https://b4shnhawx.github.io/media/posts/5/dfir4win_demo_noav.gif" alt="" width="774" height="486"></figure>
<p> </p>
<p>DFIR4win can automate the collection of most of the data you need to analyse activity on a Windows machine and compress it all into a ZIP file.<br>It includes:</p>
<p> </p>
<ul>
<li>Relevant host information</li>
<li>Event logs</li>
<li>Log hives (for more details, see Microsoft documentation)</li>
</ul>
<p><br>If you want to extract the hives, you may need to disable the real-time protection of your antivirus (AV), as it may consider the action suspicious. By default, Windows uses Windows Defender.</p>
<p><br>This script detects whether your active AV is Windows Defender or some other third-party antivirus. If it is the latter, it is possible that other modules of your AV are blocking the extraction of the files, so I recommend you to manually check if all the files you need have been extracted correctly.</p>
<p><br>If the script is not working properly to extract the files, you can do it manually with a program (such as Eric Zimmerman's Registry Explorer).</p>
<p> </p>
<p>This would be the final directory tree:<br><br></p>
<pre class="language-bash"><code>./HOST_DD-MM-YYYY.zip
 |
 |-- REGS
 |    |-- *_HOST_DD-MM-YYYY.evtx
 |
 |-- HIVES
 |    |-- Security.hiv
 |    |-- SAM.hiv
 |    |-- DEFAULT.hiv
 |    |-- NTUSER_USERNAME.DAT
 |    |-- System.hiv
 |    |-- USRCLASS_USERNAME.DAT
 |    |-- Software.hiv
 |
 |-- Host-Info_HOST_DD-MM-YYYY.txt</code></pre>
<p> </p>
<p>You have all the information about how the script works in the repository 😁</p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Welcome to my blog - First post!</title>
        <author>
            <name>b4shnhawx</name>
        </author>
        <link href="https://b4shnhawx.github.io/first-post.html"/>
        <id>https://b4shnhawx.github.io/first-post.html</id>
        <media:content url="https://b4shnhawx.github.io/media/posts/4/j2hkcly5xc781.png" medium="image" />
            <category term="personal"/>

        <updated>2024-08-18T02:54:26+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://b4shnhawx.github.io/media/posts/4/j2hkcly5xc781.png" alt="" />
                    Hello to all of you! For a long time I wanted to start a project where I could share some of my projects, achievements, experiences or ideas&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://b4shnhawx.github.io/media/posts/4/j2hkcly5xc781.png" class="type:primaryImage" alt="" /></p>
                <p>Hello to all of you!<br><br>For a long time I wanted to start a project where I could share some of my projects, achievements, experiences or ideas in the cybersecurity world, so, what better way than with a blog?<br><br>In this blog I will try to upload content from different areas of cybersecurity, some more complex, others not so much ... you will see.<br><br>A summary of some of the things I want to upload:<br>- Networking<br>- Raspberry Pi<br>- Programming in python, PowerShell and of course, my beloved bash.<br>- Flipper Zero<br>- Although it is not my expertise, some ethical hacking.<br><br>That's all, see you around!</p>
            ]]>
        </content>
    </entry>
</feed>
